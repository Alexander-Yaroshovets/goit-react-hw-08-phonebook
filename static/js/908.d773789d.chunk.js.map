{"version":3,"file":"static/js/908.d773789d.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.stayled.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectIsLoading = state => state.isLoading;\n\nexport const selectError = state => state.error;\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const ContactForm = styled.form`\n  padding: 10px;\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FormInput = styled.input`\n  display: block;\n  width: 200px;\n  height: 20px;\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-size: 18px;\n  color: darkolivegreen;\n`;\n\nexport const FormTitle = styled.h2`\n  text-align: center;\n  color: tomato;\n  padding-left: 10px;\n  margin: 0px;\n  font-size: 24px;\n  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport const FormButton = styled.button`\n  padding: 8px 20px;\n  border: 1px solid blueviolet;\n  border-radius: 5px;\n  background-color: aquamarine;\n  cursor: pointer;\n  align-self: flex-end;\n  &:hover {\n    background-color: #8e8eea;\n  }\n`;\n","import { useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport {\n  ContactForm,\n  FormInput,\n  FormLabel,\n  FormTitle,\n  FormButton,\n} from './Form.styled';\n\nexport const Form = ({ title }) => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const [name, setname] = useState('');\n  const [number, setnumber] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      name,\n      number,\n    };\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setname('');\n    setnumber('');\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setname(value);\n        break;\n      case 'number':\n        setnumber(value);\n        break;\n      default:\n        return;\n    }\n\n    contacts &&\n      contacts.find(contact => {\n        if (contact.name.toLowerCase() === value.toLowerCase()) {\n          Notify.failure(`Contact ${value}, olredy in contacts`);\n        }\n        switch (name) {\n          case 'name':\n            setname(value);\n            break;\n          case 'number':\n            setnumber(value);\n            break;\n          default:\n        }\n        return name;\n      });\n  };\n\n  return (\n    <>\n      <FormTitle>{title}</FormTitle>\n      <ContactForm onSubmit={handleSubmit}>\n        <FormLabel>\n          Name\n          <FormInput\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n\n        <FormLabel>\n          Number\n          <FormInput\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n\n        <FormButton type=\"submit\">add contact</FormButton>\n      </ContactForm>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactButton = styled.button`\n  padding: 5px 30px;\n  border: 1px solid blueviolet;\n  border-radius: 5px;\n  background-color: aquamarine;\n  cursor: pointer;\n  &:hover {\n    background-color: #8e8eea;\n  }\n`;\n\nexport const ContactItem = styled.li`\n  width: 50%;\n  display: flex;\n  gap: 20px;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  list-style: none;\n  border: 1px dashed blue;\n  padding: 5px;\n`;\n\nexport const Transaction = styled.table`\n  font-family: 'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif;\n  font-size: 14px;\n  border-radius: 10px;\n  border-spacing: 0;\n  text-align: center;\n  width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const TransactionHead = styled.thead`\n  background: #bcebdd;\n  color: white;\n  text-shadow: 0 1px 1px #2d2020;\n`;\n\nexport const TransactionBody = styled.tbody`\n  background: #d4f2af;\n  font-size: 14px;\n  border: 1px solid black;\n`;\n\nexport const Table = styled.td`\n  padding: 10px;\n  border: 1px solid green;\n`;\n\nexport const TableHead = styled.th`\n  padding: 20px;\n  border: 2px solid blueviolet;\n  border-radius: 10%;\n`;\n\nexport const InfoText = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n  color: tomato;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelectors';\n\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\nimport {\n  ContactButton,\n  Transaction,\n  TransactionHead,\n  TransactionBody,\n  Table,\n  TableHead,\n  InfoText,\n} from './Contacts.styled';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const filterValue = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterdContact = () => {\n    const normalizedFilter = filterValue.toLowerCase();\n\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  const filteredContacts = getFilterdContact();\n\n  return contacts.length > 0 ? (\n    <Transaction>\n      <TransactionHead>\n        <tr>\n          <TableHead>Name</TableHead>\n          <TableHead>Number</TableHead>\n          <TableHead>Delete Contact</TableHead>\n        </tr>\n      </TransactionHead>\n\n      {filteredContacts.map(({ id, name, number }) => (\n        <TransactionBody>\n          <tr key={id}>\n            <Table>{name}</Table>\n            <Table>{number}</Table>\n            <Table>\n              <ContactButton\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                delete\n              </ContactButton>\n            </Table>\n          </tr>\n        </TransactionBody>\n      ))}\n    </Transaction>\n  ) : (\n    <InfoText>You Phonebook is empty</InfoText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n  width: 200px;\n  height: 20px;\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n`;\nexport const FilterLabel = styled.label`\n  text-align: center;\n  display: block;\n  margin-bottom: 0.25rem;\n  font-size: 18px;\n  color: darkorchid;\n  cursor: pointer;\n`;\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { FilterInput, FilterLabel } from './Filter.stayled';\n\nimport { hendleChangeContact } from 'redux/contacts/filterSlice';\n\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const value = useSelector(selectFilter);\n\n  const hendelInput = event => {\n    dispatch(hendleChangeContact(event.target.value));\n  };\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        onChange={hendelInput}\n      />\n    </FilterLabel>\n  );\n};\n","import { Form } from '../../components/Form/Form';\n\nimport { Contacts } from '../../components/Contacts/Contacts';\n\nimport { Filter } from '../../components/Filter/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <Form title=\"Phonebook\" />\n      <Filter />\n      <Contacts title=\"MyContacts\" />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","ContactForm","styled","FormInput","FormLabel","FormTitle","FormButton","Form","title","dispatch","useDispatch","useSelector","useState","name","setname","number","setnumber","reset","handleInputChange","event","target","value","find","contact","toLowerCase","Notify","onSubmit","preventDefault","newContact","addContact","type","pattern","required","onChange","ContactButton","Transaction","TransactionHead","TransactionBody","Table","TableHead","InfoText","Contacts","filterValue","useEffect","fetchContacts","filteredContacts","normalizedFilter","includes","getFilterdContact","length","map","id","onClick","deleteContact","FilterInput","FilterLabel","Filter","hendleChangeContact","ContactsPage"],"sourceRoot":""}